pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: "${BUILD_ID}", description: 'Docker image tag')
        string(name: 'DOCKER_IMAGE', defaultValue: 'robystunna2/blog-app-cicd', description: 'Docker image name')
        string(name: 'CONTAINER_NAME', defaultValue: 'blog-app', description: 'Docker container name')
        string(name: 'REMOTE_USER', defaultValue: 'ec2-user', description: 'Remote server username')
        string(name: 'REGISTRY', defaultValue: 'robystunna2/blog-app-cicd', description: 'Your Docker registry repository Name')
        string(name: 'REGISTRY_CREDENTIAL', defaultValue: 'dockerhub-creds', description: 'Docker registry credentials id')
        string(name: 'GITHUB_CREDENTIAL', defaultValue: 'github_creds', description: 'Github access credentials id')
        string(name: 'GITHUB_REPO_URL', defaultValue: 'https://github.com/ityourwayroby/blog-app-cicd.git', description: 'Github repository url')
        string(name: 'GITHUB_BRANCH', defaultValue: 'main', description: 'Github branch for your build')
        string(name: 'SONARQUBE_SERVER_NAME', defaultValue: 'sonarqube-10.3', description: 'Name for your sonarqube server')
        string(name: 'NEXUS_URL', defaultValue: '44.200.211.161:8081', description: 'Your Nexus URL')
        string(name: 'NEXUS_CREDENTIAL', defaultValue: 'jenkins_nexus_creds', description: 'Your Nexus Credential')
    }

    environment {
        IMAGE_TAG = "${params.IMAGE_TAG}"
        DOCKER_IMAGE = "${params.DOCKER_IMAGE}"
        CONTAINER_NAME = "${params.CONTAINER_NAME}"
        REMOTE_USER = "${params.REMOTE_USER}"
        REGISTRY = "${params.REGISTRY}"
        REGISTRY_CREDENTIAL = "${params.REGISTRY_CREDENTIAL}"
        GITHUB_CREDENTIAL = "${params.GITHUB_CREDENTIAL}"
        GITHUB_REPO_URL = "${params.GITHUB_REPO_URL}"
        GITHUB_BRANCH = "${params.GITHUB_BRANCH}"
        SONARQUBE_SERVER_NAME = "${params.SONARQUBE_SERVER_NAME}"
        NEXUS_URL = "${params.NEXUS_URL}"
        NEXUS_CREDENTIAL = "${params.NEXUS_CREDENTIAL}"
    }

    stages {
        
        stage("Validate Parameters") {
            steps {
                script {
                    // Check if required parameters are provided
                    def requiredParameters = ['IMAGE_TAG', 'DOCKER_IMAGE', 'CONTAINER_NAME', 'REMOTE_USER', 'REGISTRY', 'REGISTRY_CREDENTIAL', 'GITHUB_CREDENTIAL', 'GITHUB_REPO_URL', 'GITHUB_BRANCH']
                    for (param in requiredParameters) {
                        if (!params.containsKey(param) || params[param].trim() == "") {
                            error("Parameter '$param' is missing or empty. Please provide a value.")
                        }
                    }
                }
            }
        }
        
        stage("Checkout Code From GitHub") {
            steps {
                script {
                    git branch: "${GITHUB_BRANCH}", credentialsId: "${GITHUB_CREDENTIAL}", url: "${GITHUB_REPO_URL}"
                }
            }
        }

        
        stage('Application Build And Test') {
            steps {
                sh './mvnw clean install'
                sh './mvnw test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv("${SONARQUBE_SERVER_NAME}") {
                        sh './mvnw sonar:sonar'
                    }
                }
            }
        }

        stage('Generate Artifact Version') {
            steps {
                script {
                    // Generate version using timestamp
                    def nexusVersion = "1.0.${env.BUILD_NUMBER}-${currentBuild.startTimeInMillis}"

                    // Store the generated version in an environment variable
                    env.NEXUS_VERSION = nexusVersion
                }
            }
        }
        stage('Upload to Nexus Repository') {
            steps {
                script {
                    def nexusUrl = "${NEXUS_URL}"
                    def nexusCredentialsId = "${NEXUS_CREDENTIAL}"
                    def groupId = 'com.app'
                    def artifactId = 'blog'
                    def originalVersion = '0.0.1-SNAPSHOT'
                    def packaging = 'jar'

                    def artifactPath = "target/${artifactId}-${originalVersion}.${packaging}"

                    // Use the generated version
                    def nexusVersion = env.NEXUS_VERSION

                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: nexusUrl,
                        groupId: groupId,
                        version: nexusVersion,
                        repository: 'blog-app',
                        credentialsId: nexusCredentialsId,
                        artifacts: [
                            [artifactId: artifactId,
                             classifier: '',
                             file: artifactPath,
                             type: packaging,
                             filename: "${artifactId}-${nexusVersion}.${packaging}"]
                        ]
                    )
                }
            }
        }
        
        stage('Docker Build and Push') {
            steps {
                script {
                    // Log in to Docker Registry
                    docker.withRegistry('', REGISTRY_CREDENTIAL) {
                        // Run your shell script with the IMAGE_TAG parameter
                        sh """
                        ./mvnw clean install
                        docker rmi -f ${DOCKER_IMAGE}:V00${IMAGE_TAG} &>/dev/null && echo 'Removed old container'
                        docker build -t ${DOCKER_IMAGE}:V00${IMAGE_TAG} .
                        docker push ${DOCKER_IMAGE}:V00${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy To Remote Server') {
            steps {
                script {
                   def deployCommand = '''
    mkdir -p /home/${REMOTE_USER}/deployment
    echo 'version: "3.9"

services:
  blog-application:
    image: ${DOCKER_IMAGE}:V00${IMAGE_TAG}
    container_name: ${CONTAINER_NAME}
    ports:
      - "8081:8081"' > /home/${REMOTE_USER}/deployment/docker-compose.yml
    cd /home/${REMOTE_USER}/deployment/
    docker-compose stop
    docker rmi -f ${DOCKER_IMAGE}:V00${IMAGE_TAG} &>/dev/null && echo 'Removed old container'
    docker-compose up -d
'''


                    sshPublisher(publishers: [sshPublisherDesc(
                        configName: 'deployment',
                        transfers: [sshTransfer(
                            cleanRemote: false,
                            execCommand: deployCommand,
                            execTimeout: 120000,
                            flatten: false,
                            makeEmptyDirs: false,
                            noDefaultExcludes: false,
                            patternSeparator: '[, ]+',
                            remoteDirectory: '',
                            remoteDirectorySDF: false,
                            removePrefix: '',
                            sourceFiles: ''
                        )],
                        usePromotionTimestamp: false,
                        useWorkspaceInPromotion: false,
                        verbose: true
                    )])
                }
            }
        }
    }
}
